# #no longer needed as data changed to no longer have card types 
# def get_card_vs_cash(cards: tuple, cash: tuple):
#     combined = (cash[0]), (cards[0])
#     labels, values = get_labels_and_values(combined)
#     labels = ["cash", "card"]

#     return labels, values

# @yaspin(text="Cleaning data...")
# def get_data_frame():
#     time.sleep(1)
#     target = os.path.dirname(
#         os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
#     )
#     df = pd.DataFrame()
#     for filename in os.listdir(f"{target}/data"):
#         # for each file, put all the data into a dataframe and concat it into our main dataframe
#         temp_df = pd.read_csv(f"{target}/data/{filename}")
#         df = pd.concat([df, temp_df], axis=0)
#     # df = pd.read_csv(f"{target}/data/*.csv")
#     df.columns = [
#         "date",
#         "location",
#         "customer_name",
#         "products",
#         "total",
#         "payment_type",
#         "card_number",
#     ]
#     return df

#     #baskets begins here
    #     product_ids = []
    #     cursor = con.cursor()
    #     sql_get_product_id = f"""
    #     SELECT product_id FROM products 
    #         WHERE name = '{order[3]}' AND flavour = '{order[4]}' AND size = '{order[5]}' AND price = {order[6]}"""
    #     cursor.execute(sql_get_product_id)
    #     prod_id_t = cursor.fetchone()
    #     product_ids.append(prod_id_t[0])
    #     cursor.close()

    #     cursor = con.cursor()
    #     for ID in product_ids:
    #         sql_get_trans_id = f"""
    #         SELECT transaction_id from transactions
    #             WHERE customer_id = {customer_id} AND store_id = {store_id} AND date_time = '{order[0]}'"""

    #         cursor.execute(sql_get_trans_id)
    #         trans_id_t = cursor.fetchone()
    #         transaction_id = trans_id_t[0]

    #         sql_check_basket_exists = f"""
    #         SELECT transaction_id FROM basket
    #             WHERE product_id = {ID} AND transaction_id = {transaction_id}"""
    #         cursor.execute(sql_check_basket_exists)
    #         is_exists = cursor.fetchone()

    #         if is_exists == None:
    #             print("Inserted basket")
    #             sql_insert_into_basket = f"""
    #             INSERT into basket (transaction_id, product_id)
    #                 VALUES ({transaction_id}, {ID})"""

    #             cursor.execute(sql_insert_into_basket)
    #         else:
    #             pass
    #     cursor.close()
    #     con.commit()

    # def extract_name(prod):
    # prod_list = prod.split(" - ")
    
    # # if len(prod_list) == 3 or len(prod_list) == 4:
    # #     prod_list.pop(-1)
    # # print(prod_list)
    # # prod_list.pop(-1)
    # # prod_list = prod_list[0].split(" ")
    # # prod_list.pop(0)
    # # name = " ".join(prod_list)
    # return prod_list[1]
